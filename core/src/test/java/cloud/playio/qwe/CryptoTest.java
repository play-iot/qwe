package cloud.playio.qwe;

import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Collections;
import java.util.List;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLEngine;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

import io.vertx.core.Vertx;
import io.vertx.core.net.PemKeyCertOptions;
import io.vertx.junit5.VertxExtension;

@ExtendWith(VertxExtension.class)
public class CryptoTest {

    public static SecretKey getKeyFromPassword(String password, String salt)
        throws NoSuchAlgorithmException, InvalidKeySpecException {
        SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
        KeySpec spec = new PBEKeySpec(password.toCharArray(), salt.getBytes(), 65536, 256);
        return new SecretKeySpec(factory.generateSecret(spec).getEncoded(), "AES");
    }

    @Test
    public void test_digest() throws NoSuchAlgorithmException {
        MessageDigest sha = MessageDigest.getInstance("SHA-256");
        sha.update("test".getBytes());
        System.out.println(sha.digest());
        System.out.println(Base64.getEncoder().encodeToString(sha.digest()));
    }

    @Test
    public void test_(Vertx vertx) throws NoSuchAlgorithmException {
        KeyStoreProvider provider = KeyStoreProvider.jwt().init(vertx);
        PemKeyCertOptions rs256 = (PemKeyCertOptions) provider.getKeyCert("RS256");
        MessageDigest sha = MessageDigest.getInstance("SHA-256");
        System.out.println(Base64.getDecoder().decode("jZz+xnjIDF20iI4VhFMNFe/wa5+XEA0AOE+onRMzoJuizykTYSZKcxmXpDxtDLSA8lnQXLPumNzCujoDV1l1Ig=="));
        System.out.println(Base64.getDecoder().decode("D9LOgcTFAS1MeC3kD4J+5PmAW5C4mOrPcbwbynsY6GEuGNkpe/dwIM5cr0MS/a+LT1y9z+8sKJA9UaPZTmYJwQ=="));
    }

    @Test
    public void test()
        throws NoSuchPaddingException, NoSuchAlgorithmException, IllegalBlockSizeException, BadPaddingException,
               IOException, InvalidKeySpecException, InvalidKeyException {
        // get cipher object for password-based encryption
        SecretKey sKey = getKeyFromPassword("test", "123");
        String sKeyStr = Base64.getEncoder().encodeToString(sKey.getEncoded());

        System.out.println(
            "Algo [" + sKey.getAlgorithm() + "] -- Format [" + sKey.getFormat() + "] -- Key [" + sKeyStr + "]");

        System.out.println(get());
        Cipher c = Cipher.getInstance("AES");
        // initialize cipher for encryption, without supplying
        // any parameters. Here, "myKey" is assumed to refer
        // to an already-generated key.
        c.init(Cipher.ENCRYPT_MODE, sKey);

        // encrypt some data and store away ciphertext
        // for later decryption
        byte[] cipherText = c.doFinal("This is just an example".getBytes());
        System.out.println(Base64.getEncoder().encodeToString(cipherText));

        // retrieve parameters generated by underlying cipher
        // implementation
        //        AlgorithmParameters algParams = c.getParameters();

        //        // get parameter encoding and store it away
        //        byte[] encodedAlgParams = algParams.getEncoded();
    }

    public byte[] encryptMessage(byte[] message, byte[] keyBytes)
        throws InvalidKeyException, NoSuchPaddingException, NoSuchAlgorithmException, BadPaddingException,
               IllegalBlockSizeException {

        Cipher cipher = Cipher.getInstance("AES");
        SecretKey secretKey = new SecretKeySpec(keyBytes, "AES");
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);
        return cipher.doFinal(message);
    }

    public byte[] decryptMessage(byte[] encryptedMessage, byte[] keyBytes)
        throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, BadPaddingException,
               IllegalBlockSizeException {

        Cipher cipher = Cipher.getInstance("AES");
        SecretKey secretKey = new SecretKeySpec(keyBytes, "AES");
        cipher.init(Cipher.DECRYPT_MODE, secretKey);
        return cipher.doFinal(encryptedMessage);
    }

    private static final List<String> DEFAULT_JDK_CIPHER_SUITE;

    static {
        ArrayList<String> suite = new ArrayList<>();
        try {
            SSLContext context = SSLContext.getInstance("TLS");
            context.init(null, null, null);
            SSLEngine engine = context.createSSLEngine();
            Collections.addAll(suite, engine.getEnabledCipherSuites());
        } catch (Throwable e) {
            suite = null;
        }
        DEFAULT_JDK_CIPHER_SUITE = suite != null ? Collections.unmodifiableList(suite) : null;
    }

    static List<String> get() {
        return DEFAULT_JDK_CIPHER_SUITE;
    }

}
